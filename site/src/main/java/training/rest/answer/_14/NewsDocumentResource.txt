package training.rest.answer._14;
/*
 * Copyright 2016 Hippo B.V. (http://www.onehippo.com)
 * Usage is prohibited except for people attending a training given or authorised by Hippo B.V., and only for that purpose.
 */

/*
 * This file is deliberately added as txt file to prevent compilation errors at time of insertion.
 */


import org.example.beans.NewsDocument;
import org.hippoecm.hst.container.RequestContextProvider;
import org.hippoecm.hst.content.annotations.Persistable;
import org.hippoecm.hst.content.beans.ObjectBeanManagerException;
import org.hippoecm.hst.content.beans.ObjectBeanPersistenceException;
import org.hippoecm.hst.content.beans.manager.workflow.BaseWorkflowCallbackHandler;
import org.hippoecm.hst.content.beans.manager.workflow.QualifiedWorkflowCallbackHandler;
import org.hippoecm.hst.content.beans.manager.workflow.WorkflowPersistenceManager;
import org.hippoecm.hst.content.beans.manager.workflow.WorkflowPersistenceManagerImpl;
import org.hippoecm.hst.content.beans.standard.HippoFolderBean;
import org.hippoecm.hst.core.request.HstRequestContext;
import org.hippoecm.hst.site.HstServices;
import org.hippoecm.repository.api.WorkflowException;
import org.onehippo.cms7.essentials.components.paging.Pageable;
import org.onehippo.cms7.essentials.components.rest.BaseRestResource;
import org.onehippo.cms7.essentials.components.rest.ctx.DefaultRestContext;
import org.onehippo.repository.documentworkflow.DocumentWorkflow;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;

import javax.jcr.*;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.rmi.RemoteException;

/**
 * @version "$Id$"
 */

@Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
@Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.APPLICATION_FORM_URLENCODED})
@Path("/NewsDocument/")
public class NewsDocumentResource extends BaseRestResource {

    private static Logger log = LoggerFactory.getLogger(NewsDocumentResource.class);

    @GET
    @Path("/")
    public Pageable<NewsDocument> index(@Context HttpServletRequest request) {
        return findBeans(new DefaultRestContext(this, request), NewsDocument.class);
    }

    @GET
    @Path("/page/{page}")
    public Pageable<NewsDocument> page(@Context HttpServletRequest request, @PathParam("page") int page) {
        return findBeans(new DefaultRestContext(this, request, page, DefaultRestContext.PAGE_SIZE), NewsDocument.class);
    }

    @GET
    @Path("/page/{page}/{pageSize}")
    public Pageable<NewsDocument> pageForSize(@Context HttpServletRequest request, @PathParam("page") int page, @PathParam("pageSize") int pageSize) {
        return findBeans(new DefaultRestContext(this, request, page, pageSize), NewsDocument.class);
    }

    @GET
    @Path("/item/{itempath: .+}")
    public NewsDocument page(@PathParam("itempath") String itempath) {
        try {
            final HippoFolderBean mountContentBaseBean = getMountContentBaseBean(RequestContextProvider.get());
            NewsDocument newsDocument = mountContentBaseBean.getBean(itempath, NewsDocument.class);
            if (newsDocument == null) {
                throw new NotFoundException();
            }
            return newsDocument;
        } catch (ObjectBeanManagerException e) {
            log.error("Error retrieving mount content base bean", e);
        }
        return null;
    }

    @POST
    @Path("/create")
    public NewsDocument create(@Context HttpServletRequest request, final NewsDocument incomingBean) {
        NewsDocument createDocument = null;
        final HstRequestContext requestContext = getRequestContext(request);

        try {
            final WorkflowPersistenceManager wpm = getWorkflowPersistenceManager(requestContext.getSession());
            wpm.setWorkflowCallbackHandler(REQUEST_PUBLICATION_CALLBACK_HANDLER);

            final String createDocumentPath = createNewNode(getRequestContext(request), wpm, incomingBean.getTitle());

            createDocument = (NewsDocument) wpm.getObject(createDocumentPath);

            // copy the incoming data to the newly document
            populateNewDocument(createDocument, incomingBean);

            if (createDocument != null) {
                wpm.update(createDocument);
            } else {
                log.error("Failed to add news for path: {}", createDocumentPath);
                try {
                    wpm.refresh();
                } catch (ObjectBeanPersistenceException obpe) {
                    log.warn("Failed to refresh: " + obpe.getMessage(), obpe);
                }
            }

        } catch (Exception e) {
            log.warn("Failed to create news document", e);
        }
        return createDocument;

    }

    private void populateNewDocument(NewsDocument newDocument, NewsDocument incomingBean) {
        newDocument.setTitle(incomingBean.getTitle());
        newDocument.setDate(incomingBean.getDate());
        newDocument.setIntroduction(incomingBean.getIntroduction());
    }

    private String createNewNode(HstRequestContext context, WorkflowPersistenceManager wpm, final String newNodeName) throws ObjectBeanPersistenceException {
        final String newsFolderPath = createNewsFolderPath(context);
        return wpm.createAndReturn(newsFolderPath, NewsDocument.DOCUMENT_TYPE, newNodeName, true);
    }

    private String createNewsFolderPath(final HstRequestContext context) {
        return context.getResolvedMount().getMount().getContentPath() + "/news/restimport";
    }

    private WorkflowPersistenceManager getWorkflowPersistenceManager(Session session) {
        return new WorkflowPersistenceManagerImpl(session, RequestContextProvider.get().getContentBeansTool().getObjectConverter());
    }

    private static final QualifiedWorkflowCallbackHandler<DocumentWorkflow> REQUEST_PUBLICATION_CALLBACK_HANDLER = new RequestPublicationCallbackHandler();

    private static class RequestPublicationCallbackHandler extends BaseWorkflowCallbackHandler<DocumentWorkflow> {
        @Override
        public void processWorkflow(DocumentWorkflow workflow) throws RemoteException, RepositoryException, WorkflowException {
            workflow.requestPublication();
        }
    }

}
